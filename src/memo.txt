nest auth system buildup
1. module, controller, service, repository

2.Dto를 이용하여 request로 들어오는 값을 정의 (타입 등)

3.Dto 의 값 하나하나를 class-validator를 이용하여 유효성 조건
3-1.컨트롤러로 요청이 들어올시 , Dto의 유효성 조건에 맞게 체크하기위해 ValidationPipe 를 넣어야 함.

4.핸들러 시행전, ValidationPipe가 체크할것임

5.엔티티에 , unique decorator를 사용해 유일값 부여 가능.

6.암호화 할 정보는 , bcryptjs사용.
6-1. 로그인시 , jwt토큰 발급.
		jwt관련 설정들을 다른곳에서 사용할수 있도록, 
		jwt설정 클래스(PassportStrategy 를 상속받는) 에서 @Injectable()데코레이션 사용.


7.Nest JS 는 여러가지 미들웨어(로 취급되는것들 )가 있다.
Pipes-유효성체크,데이터변환 
-> 요청이 컨트롤러에 도달전에 먼저. 페이로드 변환
Filter-오류 처리
Guards-인증 미들웨어, 지정된 경로 이용하는 사용자 통제 , Interceptors-... 

relationship 정의
-엔티티에 정의함
-데코레이터 사용하며 인자3개
-첫 파라미터는 타입, 접근방법 , eager-> 조인할건지?

typeorm 사용할때도 query 를 사용 가능.
querybuilder사용할것인가 ? repository api 사용할것인가?

a.관계데코레이터 확인 
b.헤더에 jwt같이
5:34:20

환경변수
npm install -g win-node-env
npm install config --save


config 폴더생성, json , yaml파일생성.

어느파일에서든지 config 모듈을 import 해서 사용하면 됨.
import * as config from 'config'
config.get('server')


